<?xml version='1.0' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.4">
    <actions/>
    <description>movie restful service</description>
    <keepDependencies>false</keepDependencies>
    <properties>
        <org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
            <triggers>
                <com.dabsquared.gitlabjenkins.GitLabPushTrigger plugin="gitlab-plugin@1.4.0">
                    <spec></spec>
                    <triggerOnPush>true</triggerOnPush>
                    <triggerOnMergeRequest>false</triggerOnMergeRequest>
                    <triggerOpenMergeRequestOnPush>never</triggerOpenMergeRequestOnPush>
                    <triggerOnNoteRequest>true</triggerOnNoteRequest>
                    <noteRegex>Jenkins please retry a build</noteRegex>
                    <ciSkip>true</ciSkip>
                    <skipWorkInProgressMergeRequest>true</skipWorkInProgressMergeRequest>
                    <setBuildDescription>true</setBuildDescription>
                    <branchFilterType>All</branchFilterType>
                    <includeBranchesSpec></includeBranchesSpec>
                    <excludeBranchesSpec></excludeBranchesSpec>
                    <targetBranchRegex></targetBranchRegex>
                </com.dabsquared.gitlabjenkins.GitLabPushTrigger>
            </triggers>
        </org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
        <com.dabsquared.gitlabjenkins.connection.GitLabConnectionProperty plugin="gitlab-plugin@1.4.0">
            <gitLabConnection>GITLAB</gitLabConnection>
        </com.dabsquared.gitlabjenkins.connection.GitLabConnectionProperty>
        <EnvInjectJobProperty plugin="envinject@1.92.1">
            <info>
                <loadFilesFromMaster>false</loadFilesFromMaster>
            </info>
            <on>true</on>
            <keepJenkinsSystemVariables>true</keepJenkinsSystemVariables>
            <keepBuildVariables>true</keepBuildVariables>
            <overrideBuildParameters>false</overrideBuildParameters>
            <contributors/>
        </EnvInjectJobProperty>
    </properties>
    <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.10">
        <script>//properties [pipelineTriggers([]), [$class: &apos;GitLabConnectionProperty&apos;, gitLabConnection: &apos;GITLAB&apos;], &lt;object of type org.jenkinsci.plugins.envinject.EnvInjectJobProperty&gt;]
node(&apos;docker-jenkins-slave-java8&apos;) {
   // Mark the code checkout &apos;stage&apos;....
   stage &apos;build&apos;

   // Get some code from the GitHub repository
   sh &quot;git config --global http.sslVerify false&quot;
   git url: &apos;https://10.10.0.50:9443/moviemicorservices/movie-microservice.git&apos;
   
  
   // Run the maven build
  // sh &quot;sudo mvn clean package&quot;
   
   stage &apos;Publish Docker Images&apos;
   //Push docker images to docker hub
   
   withCredentials([[$class: &apos;UsernamePasswordMultiBinding&apos;, credentialsId: &apos;dockerhubloginfolder&apos;, passwordVariable: &apos;PASSWORD&apos;, usernameVariable: &apos;USERNAME&apos;]]) {
sh &apos;&apos;&apos;#!/bin/bash
sudo docker login -u ${USERNAME} -p ${PASSWORD} -e wei-feng.niu@hpe.com
sudo docker push dockerniu/movie-microservice:latest&apos;&apos;&apos;
    }
  
stage &apos;Deploy to SIT&apos;
  
 sh &apos;&apos;&apos;marathonURL=&quot;http://10.10.2.72:8080/v2/apps&quot;
STATUS=$(curl -s  -w &quot;%{http_code}&quot; -o res.json -X PUT ${marathonURL} -d @marathon.json -H &quot;Content-type: application/json&quot; -H  &quot;Accept:application/json&quot; )
if [ $STATUS -eq 200 ]; then
  echo &quot;Marathon deploy successfully.&quot;
    cat res.json
  
 else
    echo &quot;Marathon deploy failed.&quot;
    cat res.json
    exit ${STATUS}
 fi
 rm -f res.json
 &apos;&apos;&apos;
  
  // marathon (
   //   url:&apos;http://10.10.2.72:8080/v2/groups&apos;,
    //  forceUpdate:true,
   //   filename:&apos;resources/marathon.json&apos;
   //   )
stage &apos;QA&apos;
//Stop applications in  SIT 
sh &apos;&apos;&apos;marathonURL=&quot;http://10.10.2.72:8080/v2/groups/movieapps?force=true&quot;
STATUS=$(curl -s  -w &quot;%{http_code}&quot; -o res.json -X PUT ${marathonURL} -d &apos;{&quot;scaleBy&quot;: 0}&apos; -H &quot;Content-type: application/json&quot; -H  &quot;Accept:application/json&quot; )
if [ $STATUS -eq 200 ]; then
  echo &quot;Marathon stop applications in SIT successfully.&quot;
    cat res.json
    break
  else
    echo &quot;Marathon stop applications in SIT failed.&quot;
    cat res.json
    exit ${STATUS}
 fi
 rm -f res.json
&apos;&apos;&apos;
//wait marathon stop sit apps
sleep 6
//to check if movies apps in  QA env

sh &apos;&apos;&apos;marathonURL=&quot;http://10.10.2.72:8080/v2/groups/movieapps-qa&quot;
STATUS=$(curl -s -o /dev/null -w &quot;%{http_code}&quot;  ${marathonURL} )
if [ $STATUS -eq 200 ]; then
  echo &quot;group moviesapp-qa existed.&quot;  
  echo &quot;existed&quot; &gt; movieQAGroupState
  else
   echo &quot;notexisted&quot; &gt; movieQAGroupState
    echo &quot;group moviesapp-qa not existed.&quot;
 fi
&apos;&apos;&apos;
def existInf = readFile(&apos;movieQAGroupState&apos;).trim()
if ( existInf == &quot;notexisted&quot; ){
    build job: &apos;microservices-cluster-deploy&apos;, parameters: [string(name: &apos;appjsonname&apos;, value: &apos;marathon-qa&apos;)]
}
//deploy movie micro service to QA ENV
sh &apos;&apos;&apos;marathonURL=&quot;http://10.10.2.72:8080/v2/apps&quot;
STATUS=$(curl -s  -w &quot;%{http_code}&quot; -o res.json -X PUT ${marathonURL} -d @marathon-qa.json -H &quot;Content-type: application/json&quot; -H  &quot;Accept:application/json&quot; )
if [ $STATUS -eq 200 ]; then
  echo &quot;Marathon deploy successfully.&quot;
    cat res.json
  
 else
    echo &quot;Marathon deploy failed.&quot;
    cat res.json
    exit ${STATUS}
 fi
 rm -f res.json
 &apos;&apos;&apos;
build &apos;spring-cloud-microservices/MICROSERVICE_TEST&apos;
   
   stage &apos;Stage&apos;
   echo &quot;Test Stage ...&quot;
   
   stage &apos;Product&apos;
   echo &quot;Product ....&quot;
  
}
</script>
        <sandbox>true</sandbox>
    </definition>
    <triggers/>
</flow-definition>